{"remainingRequest":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\babel-loader\\lib\\index.js!c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\src\\components\\aliyun copy.vue?vue&type=script&lang=js&","dependencies":[{"path":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\src\\components\\aliyun copy.vue","mtime":1568255505000},{"path":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\qwe\\Desktop\\lanzeyigou-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"c:\\\\Users\\\\qwe\\\\Desktop\\\\lanzeyigou-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { client, getFileNameUUID } from \"../assets/aliyun_oss.js\"; //前面的ali-js文件内的两个封装函数\n// import { getAliOSSConfig } from \"@/api/admin\";  //请求后台的接口拿Ali-OSS数据\n\nexport default {\n  name: \"Upload\",\n  props: {\n    limit: {\n      type: Number,\n      default: 1\n    }\n  },\n  data: function data() {\n    return {\n      fileList: [],\n      //文件列\n      showProgress: false,\n      //进度条的显示\n      dataObj: {},\n      //存签名信息\n      progress: 0 //进度条数据\n\n    };\n  },\n  methods: {\n    // 文件超出个数限制时的钩子\n    handleExceed: function handleExceed(files, fileList) {\n      this.$message.warning(\"\\u6BCF\\u6B21\\u53EA\\u80FD\\u4E0A\\u4F20 \".concat(this.limit, \" \\u4E2A\\u6587\\u4EF6\"));\n    },\n    // 点击文件列表中已上传的文件时的钩子\n    handlePreview: function handlePreview(file) {},\n    // 删除文件之前的钩子\n    beforeRemove: function beforeRemove(file, fileList) {\n      return this.$confirm(\"\\u786E\\u5B9A\\u79FB\\u9664 \".concat(file.name, \"\\uFF1F\"));\n    },\n    // 文件列表移除文件时的钩子\n    handleRemove: function handleRemove(file, fileList) {},\n    // 文件上传成功时的钩子\n    handleSuccess: function handleSuccess(response, file, fileList) {\n      this.fileList = fileList;\n    },\n    //文件上传前的校验\n    beforeAvatarUpload: function beforeAvatarUpload(file) {\n      var _this = this;\n\n      var isLt100M = file.size / 1024 / 1024 > 10 && file.size / 1024 / 1024 < 1024;\n      var isLt30 = file.name.length < 30;\n\n      if ([\"video/mp4\"].indexOf(file.type) !== -1) {\n        this.$message.error(\"请上传正确的视频格式\");\n        return false;\n      }\n\n      if (isLt100M) {\n        this.$message.error(\"上传视频大小要在10MB~1GB之间哦!\");\n        return false;\n      }\n\n      if (!isLt30) {\n        this.$message.error(\"上传视频文件名称长度必须要小于30个文字哦!\");\n        return false;\n      } // 请求后台接口拿配置参数\n\n\n      return new Promise(function (resolve, reject) {\n        getAliOSSConfig().then(function (response) {\n          _this.dataObj = response.data; //接口返回配置参数\n\n          console.log(response.data);\n          resolve(true);\n        }).catch(function (err) {\n          console.log(err);\n          reject(false);\n        });\n      });\n    },\n    // http-request属性来覆盖默认的上传行为（即action=\"url\"），自定义上传的实现 \n    Upload: function Upload(file) {\n      var that = this;\n\n      function multipartUpload() {\n        return _multipartUpload.apply(this, arguments);\n      }\n\n      function _multipartUpload() {\n        _multipartUpload = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee() {\n          var temporary, fileNameLength, fileFormat, fileName;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  temporary = file.file.name.lastIndexOf(\".\");\n                  fileNameLength = file.file.name.length;\n                  fileFormat = file.file.name.substring(temporary + 1, fileNameLength);\n                  fileName = getFileNameUUID() + \".\" + fileFormat;\n                  client(that.dataObj).multipartUpload(\"videoTest/\".concat(fileName), file.file, {\n                    progress: function progress(p) {\n                      //p进度条的值\n                      console.log(p);\n                      that.showProgress = true;\n                      that.progress = Math.floor(p * 100);\n                    }\n                  }).then(function (result) {\n                    //上传成功返回值，可针对项目需求写其他逻辑\n                    console.log(result);\n                  }).catch(function (err) {\n                    console.log(\"err:\", err);\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return _multipartUpload.apply(this, arguments);\n      }\n\n      multipartUpload();\n    }\n  }\n};",{"version":3,"sources":["aliyun copy.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"content\">\n    <el-upload\n      action\n      :http-request=\"Upload\"\n      :before-upload=\"beforeAvatarUpload\"\n      :on-preview=\"handlePreview\"\n      :before-remove=\"beforeRemove\"\n      :on-remove=\"handleRemove\"\n      :on-success=\"handleSuccess\"\n      :on-exceed=\"handleExceed\"\n      drag\n      :limit=\"5\"\n      :file-list=\"fileList\"\n    >\n      <i class=\"el-icon-upload\"></i>\n      <div class=\"el-upload__text\">\n        将文件拖到此处，或\n        <em>点击上传</em>\n      </div>\n      <div slot=\"tip\" class=\"el-upload__tip\">上传文件大小不能超过 1G</div>\n    </el-upload>\n\n    <el-progress\n      v-show=\"showProgress\"\n      :text-inside=\"true\"\n      :stroke-width=\"15\"\n      :percentage=\"progress\"\n    ></el-progress>\n  </div>\n</template>\n<script>\nimport { client , getFileNameUUID  } from \"../assets/aliyun_oss.js\"; //前面的ali-js文件内的两个封装函数\n// import { getAliOSSConfig } from \"@/api/admin\";  //请求后台的接口拿Ali-OSS数据\nexport default {\n  name: \"Upload\",\n  props: {\n    limit: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      fileList: [],//文件列\n      showProgress: false,//进度条的显示\n      dataObj: {}, //存签名信息\n      progress: 0 //进度条数据\n    };\n  },\n  methods: {\n    // 文件超出个数限制时的钩子\n    handleExceed(files, fileList) {\n      this.$message.warning(`每次只能上传 ${this.limit} 个文件`);\n    },\n    // 点击文件列表中已上传的文件时的钩子\n    handlePreview(file) {},\n    // 删除文件之前的钩子\n    beforeRemove(file, fileList) {\n      return this.$confirm(`确定移除 ${file.name}？`);\n    },\n    // 文件列表移除文件时的钩子\n    handleRemove(file, fileList) {},\n    // 文件上传成功时的钩子\n    handleSuccess(response, file, fileList) {\n      this.fileList = fileList;\n    },\n    //文件上传前的校验\n    beforeAvatarUpload(file) {\n      const isLt100M =\n        file.size / 1024 / 1024 > 10 && file.size / 1024 / 1024 < 1024;\n      const isLt30 = file.name.length < 30;\n      if ([\"video/mp4\"].indexOf(file.type) !== -1) {\n        this.$message.error(\"请上传正确的视频格式\");\n        return false;\n      }\n      if (isLt100M) {\n        this.$message.error(\"上传视频大小要在10MB~1GB之间哦!\");\n        return false;\n      }\n      if (!isLt30) {\n        this.$message.error(\"上传视频文件名称长度必须要小于30个文字哦!\");\n        return false;\n      }\n\t  // 请求后台接口拿配置参数\n      return new Promise((resolve, reject) => {\n        getAliOSSConfig()\n          .then(response => {\n            this.dataObj = response.data; //接口返回配置参数\n            console.log(response.data);\n            resolve(true);\n          })\n          .catch(err => {\n            console.log(err);\n            reject(false);\n          });\n      });\n    },\n    // http-request属性来覆盖默认的上传行为（即action=\"url\"），自定义上传的实现 \n    Upload(file) {\n      const that = this;\n      async function multipartUpload() {\n        let temporary = file.file.name.lastIndexOf(\".\");\n        let fileNameLength = file.file.name.length;\n        let fileFormat = file.file.name.substring(\n          temporary + 1,\n          fileNameLength\n        );\n        let fileName = getFileNameUUID() + \".\" + fileFormat; \n        client(that.dataObj)\n          .multipartUpload(`videoTest/${fileName}`, file.file, {\n            progress: function(p) {\n              //p进度条的值\n              console.log(p);\n              that.showProgress = true;\n              that.progress = Math.floor(p * 100);\n            }\n          })\n          .then(result => {\n            //上传成功返回值，可针对项目需求写其他逻辑\n            console.log(result);\n          })\n          .catch(err => {\n            console.log(\"err:\", err);\n          });\n      }\n      multipartUpload();\n    }\n  }\n};\n</script>"],"sourceRoot":"src/components"}]}