{"remainingRequest":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\src\\components\\aliyun copy.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\src\\components\\aliyun copy.vue","mtime":1569293426513},{"path":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568767580909},{"path":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\babel-loader\\lib\\index.js","mtime":1568767579596},{"path":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568767580909},{"path":"C:\\Users\\simplett\\Desktop\\lanzeyigou\\lanzeyigou\\node_modules\\vue-loader\\lib\\index.js","mtime":1568767606597}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\simplett\\\\Desktop\\\\lanzeyigou\\\\lanzeyigou\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import UploadFileApi from '@/api/system/UploadFileApi'\nimport OSS from 'ali-oss';\n\nvar oss = require('ali-oss');\n\nvar client = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\nvar result = client.multipartUpload('object-key', 'local-file', {\n  progress: function () {\n    var _progress = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(p) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Progress: ' + p);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function progress(_x) {\n      return _progress.apply(this, arguments);\n    }\n\n    return progress;\n  }()\n});\nexport default {\n  name: 'fileUpload',\n  props: {\n    data_extra: {\n      type: Object,\n      required: true\n    },\n    accept: {\n      type: Array,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      uploadUrl: '',\n      fileList: [],\n      files: 10,\n      uploadHeaders: {\n        authorization: ''\n      },\n      disabled: false\n    };\n  },\n  methods: {\n    /**\n     * @description [fnUploadRequest 覆盖默认的上传行为，实现自定义上传]\n     * @author   shanshuizinong\n     * @param    {object}   option [上传选项]\n     * @return   {null}   [没有返回]\n     */\n    fnUploadRequest: function () {\n      var _fnUploadRequest = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(option) {\n        var vm, uploadFileApi, ret, ossData, relativePath, _client, file, point, suffix, fileName, date, fileNames;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                vm = this;\n                vm.disabled = true; // 获取OSS配置信息\n\n                uploadFileApi = new UploadFileApi();\n                _context3.next = 6;\n                return uploadFileApi.fileOssParams();\n\n              case 6:\n                ret = _context3.sent;\n\n                if (ret.data && ret.data.code === '0' && ret.data.data) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new Error('获取OSS参数失败');\n\n              case 9:\n                ossData = JSON.parse(ret.data.data);\n                relativePath = ossData.relativePath;\n                _client = new OSS.Wrapper({\n                  policy: ossData.policy,\n                  accessKeyId: ossData.accessid,\n                  accessKeySecret: ossData.accesssecret,\n                  bucket: ossData.bucket,\n                  signature: ossData.signature\n                });\n                file = option.file;\n                point = file.name.lastIndexOf('.');\n                suffix = file.name.substr(point);\n                fileName = file.name.substr(0, point);\n                date = vm.$moment().format('YYYYMMDDHHmm');\n                fileNames = \"\".concat(fileName, \"_\").concat(date).concat(suffix); // 分片上传文件\n\n                _context3.next = 20;\n                return _client.multipartUpload(relativePath + fileNames, file, {\n                  progress: function () {\n                    var _progress2 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2(p) {\n                      var e;\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              e = {};\n                              e.percent = p * 100;\n                              option.onProgress(e);\n\n                            case 3:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    function progress(_x3) {\n                      return _progress2.apply(this, arguments);\n                    }\n\n                    return progress;\n                  }()\n                });\n\n              case 20:\n                ret = _context3.sent;\n                console.log(ret);\n\n                if (!(ret.res.statusCode === 200)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", ret);\n\n              case 26:\n                vm.disabled = false;\n                option.onError('上传失败');\n\n              case 28:\n                _context3.next = 36;\n                break;\n\n              case 30:\n                _context3.prev = 30;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n                this.disabled = false;\n                option.onError('上传失败');\n                this.$error(_context3.t0.message);\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 30]]);\n      }));\n\n      function fnUploadRequest(_x2) {\n        return _fnUploadRequest.apply(this, arguments);\n      }\n\n      return fnUploadRequest;\n    }(),\n\n    /**\n     * @description [fnUploadSuccess 文件上传成功的函数]\n     * @author   shanshuizinong\n     * @return   {null}  [没有返回]\n     */\n    fnUploadSuccess: function () {\n      var _fnUploadSuccess = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fnUploadSuccess() {\n        return _fnUploadSuccess.apply(this, arguments);\n      }\n\n      return fnUploadSuccess;\n    }()\n  }\n};",{"version":3,"sources":["aliyun copy.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-upload\n      :auto-upload=\"false\"\n      :action=\"uploadUrl\"\n      ref=\"upload\"\n      :before-upload=\"fnBeforeUpload\"\n      :on-success=\"fnUploadSuccess\"\n      :on-exceed=\"fnUploadExceed\"\n      :data=\"data_extra\"\n      :headers=\"uploadHeaders\"\n      :http-request=\"fnUploadRequest\"\n      drag\n      :limit=\"files\"\n      :disabled=\"disabled\"\n      multiple>\n      <i class=\"el-icon-upload\"></i>\n      <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\n      <div slot=\"tip\" class=\"el-upload__tip\">上传文件大小不能超过 1G</div>\n    </el-upload>\n  </div>\n</template>\n<script>\n// import UploadFileApi from '@/api/system/UploadFileApi'\nimport OSS from 'ali-oss'\r\nlet oss = require('ali-oss');\nvar client = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\r\nlet result = client.multipartUpload('object-key', 'local-file', {\n    progress: async function (p) {\n      console.log('Progress: ' + p);\n    }\n  });\nexport default {\n  name: 'fileUpload',\n  props: {\n    data_extra: {\n      type: Object,\n      required: true\n    },\n    accept: {\n      type: Array,\n      required: true\n    }\n  },\n  data () {\n    return {\n      uploadUrl: '',\n      fileList: [],\n      files: 10,\n      uploadHeaders: {\n        authorization: ''\n      },\n      disabled: false\n    }\n  },\n  methods: {\n    /**\n     * @description [fnUploadRequest 覆盖默认的上传行为，实现自定义上传]\n     * @author   shanshuizinong\n     * @param    {object}   option [上传选项]\n     * @return   {null}   [没有返回]\n     */\n    async fnUploadRequest (option) {\n      try {\n        let vm = this\n        vm.disabled = true\n        // 获取OSS配置信息\n        let uploadFileApi = new UploadFileApi()\n        let ret = await uploadFileApi.fileOssParams()\n        if (!(ret.data && ret.data.code === '0' && ret.data.data)) {\n          throw new Error('获取OSS参数失败')\n        }\n        let ossData = JSON.parse(ret.data.data)\n        let relativePath = ossData.relativePath\n        let client = new OSS.Wrapper({\n          policy: ossData.policy,\n          accessKeyId: ossData.accessid,\n          accessKeySecret: ossData.accesssecret,\n          bucket: ossData.bucket,\n          signature: ossData.signature\n        })\n        let file = option.file\n        const point = file.name.lastIndexOf('.')\n        let suffix = file.name.substr(point)\n        let fileName = file.name.substr(0, point)\n        let date = vm.$moment().format('YYYYMMDDHHmm')\n        let fileNames = `${fileName}_${date}${suffix}`\n        // 分片上传文件\n        ret = await client.multipartUpload(relativePath + fileNames, file, {\n          progress: async function (p) {\n            let e = {}\n            e.percent = p * 100\n            option.onProgress(e)\n          }\n        })\n        console.log(ret)\n        if (ret.res.statusCode === 200) {\n          // option.onSuccess(ret)\n          return ret\n        } else {\n          vm.disabled = false\n          option.onError('上传失败')\n        }\n      } catch (error) {\n        console.error(error)\n        this.disabled = false\n        option.onError('上传失败')\n        this.$error(error.message)\n      }\n    },\n    /**\n     * @description [fnUploadSuccess 文件上传成功的函数]\n     * @author   shanshuizinong\n     * @return   {null}  [没有返回]\n     */\n    async fnUploadSuccess () {\n      // TODO\n    }\n  }\n}\n</script>\n\n"],"sourceRoot":"src/components"}]}